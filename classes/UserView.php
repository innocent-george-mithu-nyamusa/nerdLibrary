<?php


namespace Classes;


class UserView extends UserContr
{
    public function getUser($id): ?array
    {
        $this->addUserId($id);
        return $this->getUserResult();
    }


    public function addAdminEarnings($earnings): bool {
        $this->setCAdminEarnings($earnings);
        return parent::addAdminEarningsStatus();
    }

    public function addUserEarnings(float $earnings,  string $userid): bool {

        $this->setCEarnings($earnings);
        $this->addUserId($userid);

        return parent::addUserEarningsStatus();
    }
      public function updateAccountType(string $accountType,  string $userid): bool {
            $this->addUserId($userid);
            $this->setCAccountType($accountType);
            return parent::updateAccountTypeStatus();
        }

    public function updateUser(
        string $fullname,
        string $userEmail,
        string $userDoB,
        string $userImage,
        string $oldImage,
        $tempimage,
        string $userPhone,
        string $userBuilding,
        string $userFloor,
        string $userStreet,
        string $userTown,
        string $userCountry,
        string $userBio,
        string $userLinkedIn,
        string $userFacebook,
        string $userBankAccountHolder,
        string $userBankName,
        string $userAccountNumber,
        string $userAccountType
    ): bool
    {

        Utilities::deletePhoto($oldImage, "profile_image");
        $uImage = Utilities::uploadPhoto($userImage, $tempimage, "use");

        if (!$uImage) {
            $uImage = $userImage;
        }

        $this->setCUserFullname($fullname);
        $this->setCBankName($userBankName);
        $this->setCAccountNumber($userAccountNumber);
        $this->setCAccountType($userAccountType);
        $this->setCAccountHolder($userBankAccountHolder);
        $this->setCEmail($userEmail);
        $this->setCUserDoB($userDoB);
        $this->setCUserPhone($userPhone);
        $this->setCUserImage($uImage);
        $this->setCUserBuilding($userBuilding);
        $this->setCUserFloor($userFloor);
        $this->setCUserStreet($userStreet);
        $this->setCUserTown($userTown);
        $this->setCUserCountry($userCountry);
        $this->setCUserBio($userBio);
        $this->setCUserLinkedIn($userLinkedIn);
        $this->setCUserFacebook($userFacebook);

        return $this->updateUserStatus();
    }

    public function updateAdvancedDetails(
        string $userDoB,
        string $userPhone,
        string $userBio,
        string $userLinkedIn,
        string $userFacebook,
        string $userId
    ): bool
    {

        $this->addUserId($userId);
        $this->setCUserDoB($userDoB);
        $this->setCUserPhone($userPhone);
        $this->setCUserBio($userBio);
        $this->setCUserLinkedIn($userLinkedIn);
        $this->setCUserFacebook($userFacebook);

        return $this->updateAdvancedDetailsStatus();
    }


    public function updateGeneralUserDetails(
        string $userId,
        string $fullname,
        string $userEmail,
        string $userTown,
        string $userCountry,
        string $userAddress,
        string $username,
        string $backupEmail
    ): bool {

        $this->addUserId($userId);
        $this->setCUserFullname($fullname);
        $this->setCEmail($userEmail);
        $this->setCUserTown($userTown);
        $this->setCUserCountry($userCountry);
        $this->setCUserAddress($userAddress);
        $this->setCUsername($username);
        $this->setCBackupEmail($backupEmail);

        return $this->updateGeneralDetailsStatus();
    }

    public function checkUsername(string $username): bool
    {
        parent::setCUsername($username);
        return parent::checkUsernameStatus();
    }

    public function checkEmail(string $email): bool
    {
        parent::setCEmail($email);
        return parent::checkEmailStatus();

    }

    public function updatePassword(string $oldPassword, string $newPassword, $userId): bool
    {
        $this->addUserId($userId);
        $this->setCUserOldPassword($oldPassword);
        $this->setCNewPassword($newPassword);
        return parent::updatePasswordStatus();
    }

    public function getAllUsers(): ?array
    {
        return parent::getAllUsersResult();
    }

    public function getAllAgents(): ?array
    {
        return parent::getAllAgentsResult(); // TODO: Change the autogenerated stub
    }

    public function getAllGeneralUsers(): ?array
    {
        return parent::getAllGeneralUsersResult(); // TODO: Change the autogenerated stub
    }

    public function disableUser(string $userId): bool {

        $this->addUserId($userId);
        return parent::disableUserStatus();
    }


    public function verifyAccount(string $userId, string  $verificationCode) :bool {
        $this->setCEmail($userId);
        $this->addVerificationCode($verificationCode);
        return parent::userVerificationStatus();
    }

    public function checkValidityPasswordVerificationCode(string $verificationCode) :bool {
        $this->setVerificationCode($verificationCode);
        return parent::checkPasswordVerificationCodeStatus();
    }

    public function updateUserCoverImage(string $userId, $updatedCoverImage) {
        $this->addUserId($userId);
        $this->setCUserCoverImage($updatedCoverImage);

        return $this->updateCoverImageResult();
    }

    public function updateUserProfileImage(string $userId, string $updatedProfileImage) {

        $this->addUserId($userId);
        $this->setCUserImage($updatedProfileImage);

        return $this->updateProfileImageResult();
    }


    public function initUserJson($userId): bool {

        return $this->initUserDataJson();
    }
}